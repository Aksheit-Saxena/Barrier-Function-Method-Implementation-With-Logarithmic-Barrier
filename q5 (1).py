# -*- coding: utf-8 -*-
"""Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sioKUChL_TnsOtIvj6TZrPoblSvBgiKt
"""

import numpy as np

def f(x):
    x1, x2 = x
    return (x1-4)**2 + (2*x2-3)**2
def grad(x):
    x1, x2 = x
    return np.array([2*(x1-4), 4*(2*x2-3)])
def hessian(x):
    return np.array([[2, 0], [0, 8]])

def barrier_fun(x, k):
    
    x1, x2 = x
    return (x1-4)**2 + (2*x2-3)**2 - (1/(k+1)) * np.log(5-3*x1-x2)

def barrier_grad(x, k):
     
    grad = np.zeros(2)
    grad[0] = (2*(x[0]-4)+(3/((k+1)*(5-3*x[0]-x[1]))))
    grad[1] = (4*(2*x[1]-3)+(1/((k+1)*(5-3*x[0]-x[1]))))
    return grad

def feasibility(x):
    x1, x2 = x
    return 5 - 3*x1 -x2

def barrier(f, grad, hessian, x0, max_iter=10):
    alpha = 0.05
    k = 0
    current = np.zeros(2)
    xs = [current]
    convergence_thresh = 0.012
    iter = 0
    norm_diff = 1

    while norm_diff > convergence_thresh and iter < max_iter:
        prev_x = current 
        current = prev_x - alpha * barrier_grad(prev_x,k) 
        if feasibility(current) < 0:
            alpha = alpha/2
            current = prev_x - alpha * barrier_grad(prev_x,k)
        k += 1
        norm_diff = np.linalg.norm(prev_x-current)
        xs.append(current)
        iter = iter + 1 
        print("Iteration number",iter,"\nX value is",current, "\nf(x) value ", f(current)) 
    xs = np.array(xs)

x_list = barrier(f, grad, hessian, np.array([0,0]), max_iter=10)

